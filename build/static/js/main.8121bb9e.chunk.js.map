{"version":3,"sources":["Components/form-component.js","index.js"],"names":["emailValidator","passwordValidator","FormComponent","React","Component","constructor","super","this","state","firstName","lastName","emailAddress","password","passwordConfirmation","firstNameError","emailAddressError","passwordError","passwordConfirmationError","isFormSubmitted","handleChange","bind","handleBlur","handleSubmit","validateFirstName","validateLastName","validateEmailAddress","validatePassword","validatePasswordConfirmation","validateField","event","name","value","target","setState","[object Object]","preventDefault","isValid","forEach","field","trim","lastNameError","test","render","react_default","a","createElement","className","style","textAlign","onSubmit","type","placeholder","onChange","onBlur","autoComplete","container","document","getElementById","createRoot","form_component"],"mappings":"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","file":"static/js/main.8121bb9e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst emailValidator = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nconst passwordValidator = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\n\nclass FormComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      emailAddress: \"\",\n      password: \"\",\n      passwordConfirmation: \"\",\n      firstNameError: \"\",\n      emailAddressError: \"\",\n      passwordError: \"\",\n      passwordConfirmationError: \"\",\n      isFormSubmitted: false\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateFirstName = this.validateFirstName.bind(this);\n    this.validateLastName = this.validateLastName.bind(this);\n    this.validateEmailAddress = this.validateEmailAddress.bind(this);\n    this.validatePassword = this.validatePassword.bind(this);\n    this.validatePasswordConfirmation = this.validatePasswordConfirmation.bind(\n      this\n    );\n    this.validateField = this.validateField.bind(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n\n    return;\n  }\n\n  handleBlur(event) {\n    const { name } = event.target;\n\n    this.validateField(name);\n    return;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let formFields = [\n      \"firstName\",\n      \"lastName\",\n      \"emailAddress\",\n      \"password\",\n      \"passwordConfirmation\"\n    ];\n    let isValid = true;\n    formFields.forEach(field => {\n      isValid = this.validateField(field) && isValid;\n    });\n\n    if (isValid) this.setState({ isFormSubmitted: true });\n    else this.setState({ isFormSubmitted: false });\n\n    return this.state.isFormSubmitted;\n  }\n\n  validateField(name) {\n    let isValid = false;\n\n    if (name === \"firstName\") isValid = this.validateFirstName();\n    else if (name === \"lastName\") isValid = this.validateLastName();\n    else if (name === \"emailAddress\") isValid = this.validateEmailAddress();\n    else if (name === \"password\") isValid = this.validatePassword();\n    else if (name === \"passwordConfirmation\")\n      isValid = this.validatePasswordConfirmation();\n    return isValid;\n  }\n\n  validateFirstName() {\n    let firstNameError = \"\";\n    const value = this.state.firstName;\n    if (value.trim() === \"\") firstNameError = \"First Name is required\";\n\n    this.setState({\n      firstNameError\n    });\n    return firstNameError === \"\";\n  }\n\n  validateLastName() {\n    let lastNameError = \"\";\n    const value = this.state.lastName;\n    if (value.trim() === \"\") lastNameError = \"Last Name is required\";\n\n    this.setState({\n      lastNameError\n    });\n    return lastNameError === \"\";\n  }\n\n  validateEmailAddress() {\n    let emailAddressError = \"\";\n    const value = this.state.emailAddress;\n    if (value.trim === \"\") emailAddressError = \"Email Address is required\";\n    else if (!emailValidator.test(value))\n      emailAddressError = \"Email is not valid\";\n\n    this.setState({\n      emailAddressError\n    });\n    return emailAddressError === \"\";\n  }\n\n  validatePassword() {\n    let passwordError = \"\";\n    const value = this.state.password;\n    if (value.trim === \"\") passwordError = \"Password is required\";\n    else if (!passwordValidator.test(value))\n      passwordError =\n        \"Password must contain at least 8 characters, 1 number, 1 upper and 1 lowercase!\";\n\n    this.setState({\n      passwordError\n    });\n    return passwordError === \"\";\n  }\n\n  validatePasswordConfirmation() {\n    let passwordConfirmationError = \"\";\n    if (this.state.password !== this.state.passwordConfirmation)\n      passwordConfirmationError = \"Password does not match Confirmation\";\n\n    this.setState({\n      passwordConfirmationError\n    });\n    return passwordConfirmationError === \"\";\n  }\n\n  render() {\n    return (\n      <div className=\"main\" >\n        <h3>SignUp Form</h3>\n        {this.state.isFormSubmitted ? (\n          <div className=\"details\">\n            <h3>Thanks for signing up, find your details below:</h3>\n            <div>First Name: {this.state.firstName}</div>\n            <div>Last Name: {this.state.lastName}</div>\n            <div>Email Address: {this.state.emailAddress}</div>\n          </div>\n        ) : (\n          <div style={{textAlign:\"center\"}}>\n          <form onSubmit={this.handleSubmit} >\n            <input\n              type=\"text\"\n              placeholder=\"First Name\"\n              name=\"firstName\"\n              value={this.state.firstName}\n              onChange={this.handleChange}\n              onBlur={this.handleBlur}\n              autoComplete=\"off\"\n            />\n            <br />\n            {this.state.firstNameError && (\n              <div className=\"errorMsg\">{this.state.firstNameError}</div>\n            )}\n            <input\n              type=\"text\"\n              placeholder=\"Last Name\"\n              name=\"lastName\"\n              value={this.state.lastName}\n              onChange={this.handleChange}\n              onBlur={this.handleBlur}\n              autoComplete=\"off\"\n            />\n            <br />\n            {this.state.lastNameError && (\n              <div className=\"errorMsg\">{this.state.lastNameError}</div>\n            )}\n            <input\n              type=\"email\"\n              placeholder=\"Email Address\"\n              name=\"emailAddress\"\n              value={this.state.emailAddress}\n              onChange={this.handleChange}\n              onBlur={this.handleBlur}\n              autoComplete=\"off\"\n            />\n            <br />\n            {this.state.emailAddressError && (\n              <div className=\"errorMsg\">{this.state.emailAddressError}</div>\n            )}\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              name=\"password\"\n              value={this.state.password}\n              onChange={this.handleChange}\n              onBlur={this.handleBlur}\n              autoComplete=\"off\"\n            />\n            <br />\n            {this.state.passwordError && (\n              <div className=\"errorMsg\">{this.state.passwordError}</div>\n            )}\n            <input\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              name=\"passwordConfirmation\"\n              value={this.state.passwordConfirmation}\n              onChange={this.handleChange}\n              onBlur={this.handleBlur}\n              autoComplete=\"off\"\n            />\n            <br />\n            {this.state.passwordConfirmationError && (\n              <div className=\"errorMsg\">\n                {this.state.passwordConfirmationError}\n              </div>\n            )}\n            <button>Signup</button>\n          </form>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default FormComponent;\n","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport FormComponent from \"./Components/form-component\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<FormComponent />);\n"],"sourceRoot":""}